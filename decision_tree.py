# -*- coding: utf-8 -*-
"""Decision tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPWSWI9F6Py44mVOXLtm6ArPIIDmaNS-
"""

#Import Library 
import pandas as pd
from sklearn.tree import DecisionTreeClassifier 
from sklearn.model_selection import train_test_split 
from sklearn import metrics 
from matplotlib import pyplot as plt
import graphviz


#Melakukan pembacaaan dataset 
col_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']
# load dataset
pima = pd.read_csv("pima-indians-diabetes.csv", header=None, names=col_names)
#print(pima) 

#split dataset in features and target variable
feature_cols = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']
x = pima[feature_cols] # Features
y = pima.label # Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=3)

# Membuat objek DT
     # Dapat dioptimalkan dengan menghitung Entropy  
clf = DecisionTreeClassifier()
clf = DecisionTreeClassifier(criterion="entropy", max_depth=3)

clf.fit(X_train, y_train).score(X_test, y_test)


# Memprediksi 
y_pred = clf.predict(X_test)


# Menghitung akurasi model 
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn.tree import plot_tree

plt.figure()
clf = DecisionTreeClassifier().fit(X_test, y_test)
plot_tree(clf, filled=True)
plt.title("Decision tree X, Y Test Pima Indians Diabetes")
plt.show()